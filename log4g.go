package log4g

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"runtime"
	"sync"
	"time"
	"strings"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger

	calldepth = 4
)

var std loggers
var gLevel Level
var gFlag = 0
var gPrefix = ""

func init() {

	initLevelName()

	loadConfig()

	gLevel = GetLevelByName(Config.Level)

	alignName(gLevel)

	flags := strings.Split(Config.Flag, "|")
	for _, name := range flags {
		gFlag = gFlag | getFlagByName(name)
	}

	std = append(std, newConsoleLogger(gLevel))
	if Config.Filename != "" {
		std = append(std, newFileLogger(gLevel, Config.Filename))
	}
}

func getFlagByName(name string) int {
	flags := make(map[string]int)
	flags["date"] = Ldate
	flags["time"] = Ltime
	flags["microseconds"] = Lmicroseconds
	flags["longfile"] = Llongfile
	flags["shortfile"] = Lshortfile
	flags["UTC"] = LUTC
	flags["stdFlags"] = LstdFlags
	return flags[name]
}

type Logger interface {
	Log(level Level, arg interface{}, args ...interface{})
}

type loggers []Logger

func (ls loggers) IsLevel(level Level) bool {
	return level <= gLevel
}

func (ls loggers) Log(level Level, arg interface{}, args ...interface{}) {
	for _, logger := range ls {
		logger.Log(level, arg, args...)
	}
}

func newConsoleLogger(level Level) *LogWrapper {
	return newFileLogger(level, "")
}

func newFileLogger(level Level, filename string) *LogWrapper {
	logger := new(LogWrapper)
	logger.level = level
	var output io.Writer
	if filename != "" {
		os.MkdirAll(filepath.Dir(filename), os.ModePerm)
		// Open the log file
		fd, err := os.OpenFile(filename, os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0660)
		if err != nil {
			panic(err)
		}
		output = fd
	} else {
		output = os.Stdout
	}
	logger.out = output
	return logger
}

type LogWrapper struct {
	mu  sync.Mutex // ensures atomic writes; protects the following fields
	out io.Writer  // destination for output
	buf []byte     // for accumulating text to write
	level Level
}

func (l *LogWrapper) Log(level Level, arg interface{}, args ...interface{}) {
	if level <= l.level {
		var text string
		switch arg.(type) {
		case string:
			text = fmt.Sprintf(arg.(string), args...)
			l.Output(calldepth, level, text)
		default:
			text = fmt.Sprintf(fmt.Sprintf("%v", arg), args...)
			l.Output(calldepth, level, text)
		}
		if level == FATAL {
			os.Exit(1)
		} else if level == PANIC {
			panic(text)
		}
	}
}

func (l *LogWrapper) Output(calldepth int, level Level, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if gFlag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(&l.buf, now, level, file, line)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

// SetOutput sets the output destination for the logger.
func (l *LogWrapper) SetOutput(w io.Writer) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

func (l *LogWrapper) formatHeader(buf *[]byte, t time.Time, level Level, file string, line int) {
	*buf = append(*buf, gPrefix...)
	if gFlag&LUTC != 0 {
		t = t.UTC()
	}
	if gFlag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if gFlag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if gFlag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if gFlag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}

	*buf = append(*buf, GetLevelDisplayName(level)...)
	*buf = append(*buf, ' ')

	if gFlag&(Lshortfile|Llongfile) != 0 {
		if gFlag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}
